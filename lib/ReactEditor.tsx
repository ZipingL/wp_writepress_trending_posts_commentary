// import "prismjs";
// import "prismjs/components";
// import "prismjs/components/prism-core";
// import "prismjs/components/prism-clike";
// import "prismjs/components/prism-javascript";
// import "prismjs/components/prism-typescript";
// import "prismjs/themes/prism-tomorrow.css";
// import CodeEditor from "react-simple-code-editor";
import {motion} from 'framer-motion';
export type PostDataType = {
  ID: number;
  post_author: string;
  post_date: string;
  post_date_gmt: string;
  post_title: string;
  post_excerpt: string;
  post_status: string;
  comment_status: string;
  ping_status: string;
  post_password: string;
  post_name: string;
  post_type: string;
  post_mime_type: string;
  comment_count: string;
  categories: {
    term_id: number;
    name: string;
    slug: string;
    term_group: number;
    term_taxonomy_id: number;
    taxonomy: string;
  }[];
  thumbnail: string;
  permalink: string;
  post_reading_time: string;
  thumbnail_width: number;
  thumbnail_height: number;
  post_modified: string;
  post_modified_gmt: string;
  [key: string]: any;
};

export type TopPost ={
  id: number;
  count: number;
  post_title: string;
  permalink: string;
  post_thumbnail_url: string;
}
export const EditorsHelper = () => {
  const React = window.React;


  const [topPosts, setTopPosts] = React.useState<{
    topRows: TopPost[]
  } | null>(null);

  const [postCommentaries, setPostCommentaries] = React.useState<{
    id: number;
    commentary: string;
  }[] | null>();


  const [postsData, setPostsData] = React.useState<PostDataType[] | null>(null);
  React.useEffect(() => {
    console.log('Fetching data');
 
    const xhrPosts = new XMLHttpRequest();

    xhrPosts.open('POST', 'https://liu.academy/awsuni/views/synthethics?minutes=4140');

    xhrPosts.setRequestHeader('Content-Type', 'application/json');

    xhrPosts.onload = () => {
      if(xhrPosts.readyState === 4 && xhrPosts.status === 200) {
        const posts = JSON.parse(xhrPosts.responseText);
        console.info('Got posts list', posts);
        if(topPosts === null) {
          setTopPosts(posts);


        }
      }
    }

    xhrPosts.send();

  }, []);


  React.useEffect(() => {
    if(topPosts !== null && postsData === null ) {
      console.log('Got posts list at second useffect', topPosts);

      const topPostIds = topPosts.topRows.map((post) => post.id);
      const xhrPosts = new XMLHttpRequest();
      const url = 'https://awsuni.com/wp-json/wp/v2/augmented/posts?include=' + topPostIds.join(',');
      console.info('Fetching posts data', url);
      xhrPosts.open('GET', url);
      xhrPosts.setRequestHeader('Content-Type', 'application/json');

      xhrPosts.onload = () => {
        if(xhrPosts.readyState === 4 && xhrPosts.status === 200) {
          const posts = JSON.parse(xhrPosts.responseText);
          console.info('Got posts data list', posts);
          if(postsData === null) {
            setPostsData(posts);
          }

        }
      }

      xhrPosts.send();
    
    }
  }, [topPosts]);





  return(<>
  
  {
      postsData=== null || topPosts === null ?   (<article className="first-child">
      <figure className="post-thumbnail mb-30">
        <img
          className="border-radius-5"
          src="https://synthethics.awscyber.ai/static/media/selipsky-augmented.8cbda8aa54caa34f44fc.jpg"
          alt=""
        />
      </figure>
      <div className="entry-meta meta-0 mb-10 text-uppercase font-heading" style={{'display':'none'}}>
        <a href="category.html">
          <span className="post-in">World</span>
        </a>
        <a href="category.html">
          <span className="post-in">Travel</span>
        </a>
      </div>
      <h2 className="post-title">
      
          Please wait while we load the latest posts and commentary generated by our AI and ML based editor: LiuSynthethics.
        
      </h2>
      <div className="entry-meta meta-1 font-medium color-grey mt-15 mb-30">
        <span className="post-on">
          <span className="d-none d-md-inline">Posted on</span>25 April 2020
        </span>
        <span className="time-reading"
        style={{
          display:'none'
        }}>
          <i className="ti-timer" />
          10 mins read
        </span>
        <span className="hit-count">
          <i className="ti-bolt" /> 159k Views
        </span>
      </div>
      <div className="post-exerpt" style={{
        display:'none'
      }}>
        <p>
          Headed to Paris? Even if you happen to don’t have the{" "}
          <a
            className="red-tooltip"
            href="#"
            data-toggle="tooltip"
            data-placement="top"
            title="The formula for calculating upside extension levels above a given price range is: Trough + (Price Range× Extension Ratio)"
          >
            price range
          </a>{" "}
          to e-book a room at one of many metropolis’s luxurious five-star
          accommodations, you may nonetheless dip your toe into Parisian glitz
          and glamour by splurging on considered one of these on-property
          experiences.
        </p>
        <p>
          Seated in one of many leather-based{" "}
          <a
            className="red-tooltip"
            href="#"
            data-toggle="tooltip"
            data-placement="top"
            title="The United Nations warns of new risks to children and a rise in mental illness. And governments are noting the unintended consequences of restrictions"
          >
            banquettes
          </a>{" "}
          beneath the romantic stained-glass dome designed by Gustave Eiffel,
          it’s unattainable to not have a pinch-me-I’m-in-Paris second.
        </p>
      </div>
    </article>)
    :  (<PostArticleList postsData={postsData} topPosts={topPosts.topRows}/>)
  }
  </>
  )
}

const PostArticleList = (props: {
  postsData: PostDataType[];
  topPosts?: TopPost[];
}) => {
  const React = window.React;

  const propsAfterFirst = props.postsData.slice(1);
  return ( <> 
  

<PostArticleFirstChild
post={props.postsData[0]} ind={0}
key={0}
topPosts={props.topPosts}/>
  


{propsAfterFirst.map((post,index) => {
 return (
  <PostArticleSecondChild 
  key={index + 1}
  post={post} ind={index + 1} topPosts={props.topPosts}/>
 )
})}
</>)
}

export const PostArticleSecondChild = (props: {
  post: PostDataType;
  ind: number;
  topPosts?: TopPost[];
}) => {
  const React = window.React;
  const index = props.ind;
  const post = props.post;

  const [postCommentary, setPostCommentary] = React.useState<string[] | null>(null);
  React.useEffect(() => {
    if(postCommentary === null && props.post !== null) {

      const xhrPosts = new XMLHttpRequest();
      const url = 'https://liu.academy/synth/ethics';
      console.info('Fetching posts data', url);
      xhrPosts.open('POST', url);
      xhrPosts.setRequestHeader('Content-Type', 'application/json');

      xhrPosts.onload = () => {
        if(xhrPosts.readyState === 4 && xhrPosts.status === 200) {
          const posts = JSON.parse(xhrPosts.responseText);
          console.info('Got posts commentary SecondChild', posts);
          if(postCommentary === null) {
           
            const commentaryGrouped = groupCommentaryToParagraphs(posts.completion);
            setPostCommentary(commentaryGrouped);
          }
        }
      }

  

      xhrPosts.send(JSON.stringify({
        prompt:getPrompt(post.post_excerpt, post.post_title)
      }));
    }
    }, [props.post]);

  return( 
     <article 
    key={index}
    className="second-child">
  
      <figure className="post-thumbnail mb-30">
        <img
          className="border-radius-5"
          src={post.thumbnail}
          alt=""
        />
      </figure>
  
      <div className="entry-meta meta-0 mb-10 text-uppercase font-heading">
        {post.categories.map((category,index) => {
          return (
            <a href="category.html" 
            key={index}
            >
              <span className="post-in">{category.name}</span>
            </a>
          );
        }
        )}
      </div>
      <h2 className="post-title">
        <a href={post.permalink}>
          {post.post_title}
        </a>
      </h2>
      <div className="entry-meta meta-1 font-medium color-grey mt-15 mb-30">
        <span className="post-on">
          <span className="d-none d-md-inline">Posted on</span>{post.post_date}
        </span>
        <span className="time-reading">
          <i className="ti-timer" />
          {post.post_reading_time}
        </span>
        <span className="hit-count">
          <i className="ti-bolt" /> {
            props.topPosts?.find((topPost) => topPost.id === post.ID)?.count || 0
          } Views
        </span>
      </div>
      <div className="post-exerpt mb-30">
       <h4>
          Commentary from Synthethetics as to why this post, <i>{post.post_title.slice(0, 20)}...</i>, is trending:
       </h4>
       {
          postCommentary === null ? (
            <p>
              Please wait while we load the commentary generated by our AI and ML based editor: LiuSynthethics.</p>

          ):(
            <>
              {
                postCommentary.map((commentary, index) => {
                  return(
                    <p key={index}>
                      {commentary}
                    </p>
                  )
                })
              }
            </>
          )
       }
      </div>
    </article>)

}


export const PostArticleFirstChild = (props: {
  post: PostDataType;
  ind: number;
  topPosts?: TopPost[];
}) => {

  const React = window.React;

  const index = props.ind;
  const post = props.post;

  const [postCommentary, setPostCommentary] = React.useState<string[] | null>(null);

  React.useEffect(() => {
    if(postCommentary === null && props.post !== null) {

      const xhrPosts = new XMLHttpRequest();
      const url = 'https://liu.academy/synth/ethics';
      console.info('Fetching posts data', url);
      xhrPosts.open('POST', url);
      xhrPosts.setRequestHeader('Content-Type', 'application/json');

      xhrPosts.onload = () => {
        if(xhrPosts.readyState === 4 && xhrPosts.status === 200) {
          const posts = JSON.parse(xhrPosts.responseText);
          console.info('Got posts commentary first child', posts);
          if(postCommentary === null) {
            const commentaryGrouped = groupCommentaryToParagraphs(posts.completion);
         
            
     
            setPostCommentary(commentaryGrouped);

          }

        }
      }

  

      xhrPosts.send(JSON.stringify({
        prompt:getPrompt(post.post_excerpt, post.post_title)
      }));
    }
    }, [props.post]);


   



  return (
    <article className="first-child">
  <figure className="post-thumbnail mb-30">
    <img
      className="border-radius-5"
      src={post.thumbnail}
      alt=""
    />
  </figure>
  <div className="entry-meta meta-0 mb-10 text-uppercase font-heading">
    {post.categories.map((category,index) => {
      return (
        <a href="category.html"
        key={index}
        >
          <span className="post-in">{category.name}</span>
        </a>

      );
    }
    )}
  </div>
  <h2 className="post-title">
    <a href={post.permalink}>
      {post.post_title}
    </a>
  </h2>
  <div className="entry-meta meta-1 font-medium color-grey mt-15 mb-30">
    <span className="post-on">
      <span className="d-none d-md-inline">Posted on</span>{
        (new Date(post.post_date)).toLocaleDateString('en-US', {
          dateStyle: 'full',
        }) + ' at ' + (new Date(post.post_date)).toLocaleTimeString('en-US', {
          timeStyle: 'short',
        })

      }
    </span>
    <span className="time-reading">
      <i className="ti-timer" />
      {post.post_reading_time}
    </span>
    <span className="hit-count">
      <i className="ti-bolt" /> {props.topPosts?.find((topPost) => topPost.id === post.ID)?.count || 0} Views
    </span>
  </div>
  <div className="post-exerpt mb-30">
    {
      postCommentary === null ? (
        <p>
          Please wait while we load the commentary generated by our AI and ML based editor: LiuSynthethics.</p>

      ) :(<>
        <h4>
          Commentary from Synthethetics as to why this post, <i>{post.post_title.slice(0, 20)}...</i>, is trending:
        </h4>

        {
          postCommentary.map((commentary, index) => {
            return(
              <p key={index}>
                {commentary}
              </p>
            )
          })
        }
       </>
      )
    }
  </div>
</article>)
}


export function getPrompt(post_excerpt:string, post_title:string){
  const $excerpSEntes = post_excerpt;
  const $sentesces = $excerpSEntes.match(/[^\.!\?]+[\.!\?]+/g);
  let $excerptShortend = "";

  //if cannot iterable then use the whole excerpt
  if (!$sentesces) {
    $excerptShortend = $excerpSEntes.substring(0, 100);
  } else {
    let wordcount = 0;
    if ($sentesces.length > 7) {
      $excerptShortend = $sentesces?.at(7)?.replace(" \n", "") || $sentesces[0] || ""
    }
  }

  // let promptForEditorColunist =
  //   `Currently a popular press release has the title: ${post_title}, and excerpt ${$excerptShortend}...,  would you know why this press release has now become to most popular one?-> `;
  const promptForEditorColunist =
  `The current top trending press release for today, ${(new Date()).toLocaleDateString(
    'en-US', {
      'year': 'numeric',
      'month': 'long',
      'day': 'numeric',
    }
  )} is the report titled: “${post_title}”, and an excerpt: “` +
  $excerptShortend +
  '”, would you know why this press release has now become to most popular one?';



  return promptForEditorColunist;
}

export function groupCommentaryToParagraphs(commentary:string){
  let paragraphGroup = "";
  const regexPatternSetnencesButAvoidUrls = /(?<!\w\.\w.)(?<![A-Z][a-z]\.)(?<=\.|\?)\s/g;

  const sentences = commentary.split(regexPatternSetnencesButAvoidUrls);

  const sentencesOutputASrray: string[] = [];
  let curCount = 0;
  if(sentences) {
    let sentencesPerParagraph =sentences.length % 4 === 0 ? 4:3;
    let totalCount = 0;
     for(let i = 0; i < sentences.length; i++) {
   
       paragraphGroup += sentences[i] + " ";
       curCount++;
    

       if(curCount === sentencesPerParagraph) {
         const trimmed = paragraphGroup.trim();
          sentencesOutputASrray.push(trimmed);
         paragraphGroup = "";
         curCount = 0;
         totalCount += sentencesPerParagraph;
       }

      
     }
     if(totalCount < sentences.length && curCount > 0) {
      const trimmed = paragraphGroup.trim();
      sentencesOutputASrray.push(trimmed);
     }

     return sentencesOutputASrray;
  } else {
    return [commentary];
  }
}
export default EditorsHelper;
